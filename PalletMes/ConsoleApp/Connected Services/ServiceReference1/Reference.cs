//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System;
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultInfo", Namespace="http://tempuri.org/")]
    public partial class ResultInfo : object
    {
        
        private int codeField;
        
        private string msgField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string msg
        {
            get
            {
                return this.msgField;
            }
            set
            {
                this.msgField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IContract")]
    public interface IContract
    {
        
        // CODEGEN: 正在生成消息协定，因为操作 GetPrintInLabel 既不是 RPC 也不是文档包装样式。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetPrintInLabel", ReplyAction="*")]
        ServiceReference1.GetPrintInLabelResponse GetPrintInLabel(ServiceReference1.GetPrintInLabelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetPrintInLabel", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReference1.GetPrintInLabelResponse> GetPrintInLabelAsync(ServiceReference1.GetPrintInLabelRequest request);
        
        // CODEGEN: 正在生成消息协定，因为操作 GetPrintOutLabel 既不是 RPC 也不是文档包装样式。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetPrintOutLabel", ReplyAction="*")]
        ServiceReference1.GetPrintOutLabelResponse GetPrintOutLabel(ServiceReference1.GetPrintOutLabelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetPrintOutLabel", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReference1.GetPrintOutLabelResponse> GetPrintOutLabelAsync(ServiceReference1.GetPrintOutLabelRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetPrintInLabelRequest
    {
        
        public GetPrintInLabelRequest()
        {
        }

        public static explicit operator GetPrintInLabelRequest(string v)
        {
            throw new NotImplementedException();
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPrintInLabelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetPrintInLabelResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public ServiceReference1.ResultInfo GetPrintInLabelResult;
        
        public GetPrintInLabelResponse()
        {
        }
        
        public GetPrintInLabelResponse(ServiceReference1.ResultInfo GetPrintInLabelResult)
        {
            this.GetPrintInLabelResult = GetPrintInLabelResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetPrintOutLabelRequest
    {
        
        public GetPrintOutLabelRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPrintOutLabelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetPrintOutLabelResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public ServiceReference1.ResultInfo GetPrintOutLabelResult;
        
        public GetPrintOutLabelResponse()
        {
        }
        
        public GetPrintOutLabelResponse(ServiceReference1.ResultInfo GetPrintOutLabelResult)
        {
            this.GetPrintOutLabelResult = GetPrintOutLabelResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IContractChannel : ServiceReference1.IContract, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ContractClient : System.ServiceModel.ClientBase<ServiceReference1.IContract>, ServiceReference1.IContract
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ContractClient() : 
                base(ContractClient.GetDefaultBinding(), ContractClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractClient(EndpointConfiguration endpointConfiguration) : 
                base(ContractClient.GetBindingForEndpoint(endpointConfiguration), ContractClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ContractClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ContractClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.GetPrintInLabelResponse ServiceReference1.IContract.GetPrintInLabel(ServiceReference1.GetPrintInLabelRequest request)
        {
            return base.Channel.GetPrintInLabel(request);
        }
        
        public ServiceReference1.ResultInfo GetPrintInLabel()
        {
            ServiceReference1.GetPrintInLabelRequest inValue = new ServiceReference1.GetPrintInLabelRequest();
            ServiceReference1.GetPrintInLabelResponse retVal = ((ServiceReference1.IContract)(this)).GetPrintInLabel(inValue);
            return retVal.GetPrintInLabelResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.GetPrintInLabelResponse> ServiceReference1.IContract.GetPrintInLabelAsync(ServiceReference1.GetPrintInLabelRequest request)
        {
            return base.Channel.GetPrintInLabelAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.GetPrintInLabelResponse> GetPrintInLabelAsync()
        {
            ServiceReference1.GetPrintInLabelRequest inValue = new ServiceReference1.GetPrintInLabelRequest();
            return ((ServiceReference1.IContract)(this)).GetPrintInLabelAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.GetPrintOutLabelResponse ServiceReference1.IContract.GetPrintOutLabel(ServiceReference1.GetPrintOutLabelRequest request)
        {
            return base.Channel.GetPrintOutLabel(request);
        }
        
        public ServiceReference1.ResultInfo GetPrintOutLabel()
        {
            ServiceReference1.GetPrintOutLabelRequest inValue = new ServiceReference1.GetPrintOutLabelRequest();
            ServiceReference1.GetPrintOutLabelResponse retVal = ((ServiceReference1.IContract)(this)).GetPrintOutLabel(inValue);
            return retVal.GetPrintOutLabelResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.GetPrintOutLabelResponse> ServiceReference1.IContract.GetPrintOutLabelAsync(ServiceReference1.GetPrintOutLabelRequest request)
        {
            return base.Channel.GetPrintOutLabelAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.GetPrintOutLabelResponse> GetPrintOutLabelAsync()
        {
            ServiceReference1.GetPrintOutLabelRequest inValue = new ServiceReference1.GetPrintOutLabelRequest();
            return ((ServiceReference1.IContract)(this)).GetPrintOutLabelAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding))
            {
                return new System.ServiceModel.EndpointAddress("http://10.40.3.209:5050/PrintService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ContractClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ContractClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding,
        }
    }
}
